/*
 * CoadunationLib: The coaduntion implementation library.
 * Copyright (C) 2006  Rift IT Contracting
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * AntListener.java
 *
 * This class listens for events generated by the ANT environment.
 */

// package path
package com.rift.coad.lib.thirdparty.ant;

// ant imports
import org.apache.tools.ant.BuildEvent;
import org.apache.tools.ant.BuildListener;

/**
 * This class listens for events generated by the ANT environment.
 *
 * @author Brett Chaldecott
 */
public class AntListener implements  BuildListener {
    
    // The classes private member variables
    private String message = new String();
    
    
    /**
     * Creates a new instance of AntListener
     */
    public AntListener() {
    }
    
    
    /**
     * Signals that the last target has finished.
     */
    public void buildFinished(BuildEvent buildEvent) {
        //this.buildEvent = buildEvent;
    }
    
    /**
     * Signals that a build has started.
     */
    public void buildStarted(BuildEvent buildEvent) {
        //this.buildEvent = buildEvent;
    }
    
    
    /**
     * Signals a message logging event.
     */
    public void messageLogged(BuildEvent buildEvent) {
        this.message += buildEvent.getMessage();
    }
    
    
    /**
     * Signals that a target has finished.
     */
    public void targetFinished(BuildEvent buildEvent) {
        //this.buildEvent = buildEvent;
    }
    
    
    /**
     * Signals that a target is starting.
     */
    public void targetStarted(BuildEvent buildEvent) {
        //this.buildEvent = buildEvent;
    }
    
    
    /**
     * Signals that a task has finished.
     */
    public void taskFinished(BuildEvent buildEvent) {
        //this.buildEvent = buildEvent;
    }
    
    
    /**
     * Signals that a task is starting.
     */
    public void taskStarted(BuildEvent buildEvent) {
        //this.buildEvent = buildEvent;
    }
    
    
    /**
     * This method return the current build build event.
     */
    public String getMessage() {
        return message;
    }
}
