apply plugin: 'maven'
apply plugin: 'announce'

import org.apache.tools.ant.filters.ReplaceTokens

libsDirName="."
version="1.0.1"
sourceCompatibility=1.6
targetCompatibility=1.6
javaHome = getJavaHomeVar()
dipforgeHome = "${projectDir}/dipforge/".toString()


dependsOn(':libs:CoadunationBase')
dependsOn(':libs:CoadunationAnnotations')
dependsOn(':libs:CoadunationClient')
dependsOn(':libs:CoadunationSecurity')
dependsOn(':libs:CoadunationCommon')
dependsOn(':libs:CoadunationLib')
dependsOn(':libs:CoadunationHibernate')
dependsOn(':auth:CoadunationRDBAuth')
dependsOn(':client:DeploymentDaemonClient')
dependsOn(':client:DesktopServerClient')
dependsOn(':client:DNSServerClient')
dependsOn(':client:MessageServiceClient')
dependsOn(':libs:CoadunationUtil')
dependsOn(':client:EmailServerClient')
dependsOn(':client:EventServerClient')
dependsOn(':client:HsqlDBEngineClient')
dependsOn(':client:RDBUserManagerClient')
dependsOn(':client:RSSReaderClient')
dependsOn(':client:ServiceBrokerClient')
dependsOn(':client:TimerClient')
dependsOn(':client:TomcatClient')
dependsOn(':cli:DeploymentDaemonCommandLineTool')
dependsOn(':cli:MessageServiceCommandLineTool')
dependsOn(':cli:ServiceBrokerCommandLineTool')
dependsOn(':cli:TimerCommandLineTool')
dependsOn(':utils:CoadunationUtil')
dependsOn(':daemon:0005-DNSServer')
dependsOn(':daemon:0010-HsqlDBEngineDaemon')
dependsOn(':daemon:0020-RDBUserManager')
dependsOn(':daemon:0040-MessageService')
dependsOn(':daemon:0040-ServiceBroker')
dependsOn(':daemon:0045-EmailServer')
dependsOn(':daemon:0050-DesktopServer')
dependsOn(':daemon:0050-EventServer')
dependsOn(':daemon:0050-Timer')
dependsOn(':daemon:0060-Tomcat')
dependsOn(':daemon:0101-DeploymentDaemon')
dependsOn(':daemon:0102-RSSReader')
//dependsOn(':web:CoadunationAdmin')
//dependsOn(':web:CoadunationDesktop')
dependsOn(':web:FileManager')
dependsOn(':rdf:SchemaUtils')
dependsOn(':web:SchemaStore')
dependsOn(':rdf:Semantics')
dependsOn(':rdf:CoadunationSemantics')
dependsOn(':rdf:CommonTypes')
dependsOn(':client:AuditTrail')
dependsOn(':daemon:0100-AuditTrailServer')
dependsOn(':daemon:0150-CoadunationTypeManager')
dependsOn(':web:lib:CoadunationGWTLibrary')
dependsOn(':web:lib:WebLibs')
dependsOn(':web:lib:AuditTrailGWT')
//dependsOn(':web:AuditTrailConsole')
dependsOn(':libs:GroovyServletBootStrap')
dependsOn(':libs:GroovyLib')
dependsOn(':client:GroovyDaemonClient')
dependsOn(':daemon:0140-GroovyDaemon')
dependsOn(':client:DataMapperBroker')
dependsOn(':daemon:0160-DataMapperBroker')
dependsOn(':client:ProjectClient')
dependsOn(':daemon:0200-ProjectManager')

configurations {
    releaseSbin
    releaseLibs
    releaseClients
    releaseBin
    releaseDaemon
    releaseWeb
    releaseEAR
    releaseTools
    releaseRDFClients
    releaseExtractWeb
    releaseGroovyLib
    releaseRDFTypeGenerator
    releaseRDFTypeTargets
    compile
}

task compile {
}

task copyToSbin(type: Copy) {
    into "dipforge/sbin/"
    from configurations.releaseSbin
}

task copyToLib(type: Copy) {
    into "dipforge/lib/"
    from configurations.releaseLibs
    exclude "**/*CoadunationBase*"
    exclude "**/*CoadunationUtil*"
}

task copyToClient(type: Copy) {
    into "dipforge/clientlib/"
    from configurations.releaseClients
}
task copyToRDFClient(type: Copy) {
    into "dipforge/clientlib/rdf/"
    from configurations.releaseRDFClients
}

task copyToDaemon(type: Copy) {
    into "dipforge/deploy/"
    from configurations.releaseDaemon
    include "**/0*" + version + ".jar"
    include "**/1*" + version + ".jar"
}

task copyWarToDaemon(type: Copy) {
    into "dipforge/deploy/"
    from configurations.releaseWeb
    include "**/*" + version + ".war"
}

task copyEarToDaemon(type: Copy) {
    into "dipforge/deploy/"
    from configurations.releaseEAR
    include "**/*" + version + ".ear"
}

release.doLast {
    ant.unzip(
        src: "$projectDir/../web/SchemaStore/build/SchemaStore-${version}.war" , 
        dest: "$projectDir/dipforge/var/tomcat/webapps/schema")
    ant {
        mkdir(dir:"dipforge/var/projects/documentation/views/CoadunationCommon")
        copy(todir: "dipforge/var/projects/documentation/views/CoadunationCommon"){
            fileset(dir: "../libs/CoadunationCommon/build/docs/javadoc") {}
        }
        mkdir(dir:"dipforge/var/projects/documentation/views/CoadunationHibernate")
        copy(todir: "dipforge/var/projects/documentation/views/CoadunationHibernate"){
            fileset(dir: "../libs/CoadunationHibernate/build/docs/javadoc") {}
        }
        mkdir(dir:"dipforge/var/projects/documentation/views/CoadunationLib")
        copy(todir: "dipforge/var/projects/documentation/views/CoadunationLib"){
            fileset(dir: "../libs/CoadunationLib/build/docs/javadoc") {}
        }
        mkdir(dir:"dipforge/var/projects/documentation/views/CoadunationUtil")
        copy(todir: "dipforge/var/projects/documentation/views/CoadunationUtil"){
            fileset(dir: "../libs/CoadunationUtil/build/docs/javadoc") {}
        }
        mkdir(dir:"dipforge/var/projects/documentation/views/Semantics")
        copy(todir: "dipforge/var/projects/documentation/views/Semantics"){
            fileset(dir: "../rdf/Semantics/build/docs/javadoc") {}
        }
        mkdir(dir:"dipforge/var/projects/documentation/views/AuditTrail")
        copy(todir: "dipforge/var/projects/documentation/views/AuditTrail"){
            fileset(dir: "../client/AuditTrail/build/docs/javadoc") {}
        }
        mkdir(dir:"dipforge/var/projects/documentation/views/CoadunationTypeManager")
        copy(todir: "dipforge/var/projects/documentation/views/CoadunationTypeManager"){
            fileset(dir: "../client/CoadunationTypeManager/build/docs/javadoc") {}
        }
        mkdir(dir:"dipforge/var/projects/documentation/views/DeploymentDaemonClient")
        copy(todir: "dipforge/var/projects/documentation/views/DeploymentDaemonClient"){
            fileset(dir: "../client/DeploymentDaemonClient/build/docs/javadoc") {}
        }
        mkdir(dir:"dipforge/var/projects/documentation/views/DesktopServerClient")
        copy(todir: "dipforge/var/projects/documentation/views/DesktopServerClient"){
            fileset(dir: "../client/DesktopServerClient/build/docs/javadoc") {}
        }
        mkdir(dir:"dipforge/var/projects/documentation/views/DNSServerClient")
        copy(todir: "dipforge/var/projects/documentation/views/DNSServerClient"){
            fileset(dir: "../client/DNSServerClient/build/docs/javadoc") {}
        }
        mkdir(dir:"dipforge/var/projects/documentation/views/EmailServerClient")
        copy(todir: "dipforge/var/projects/documentation/views/EmailServerClient"){
            fileset(dir: "../client/EmailServerClient/build/docs/javadoc") {}
        }
        mkdir(dir:"dipforge/var/projects/documentation/views/EventServerClient")
        copy(todir: "dipforge/var/projects/documentation/views/EventServerClient"){
            fileset(dir: "../client/EventServerClient/build/docs/javadoc") {}
        }
        mkdir(dir:"dipforge/var/projects/documentation/views/HsqlDBEngineClient")
        copy(todir: "dipforge/var/projects/documentation/views/HsqlDBEngineClient"){
            fileset(dir: "../client/HsqlDBEngineClient/build/docs/javadoc") {}
        }
        mkdir(dir:"dipforge/var/projects/documentation/views/MessageServiceClient")
        copy(todir: "dipforge/var/projects/documentation/views/MessageServiceClient"){
            fileset(dir: "../client/MessageServiceClient/build/docs/javadoc") {}
        }
        mkdir(dir:"dipforge/var/projects/documentation/views/ProjectClient")
        copy(todir: "dipforge/var/projects/documentation/views/ProjectClient"){
            fileset(dir: "../client/ProjectClient/build/docs/javadoc") {}
        }
        mkdir(dir:"dipforge/var/projects/documentation/views/RDBUserManagerClient")
        copy(todir: "dipforge/var/projects/documentation/views/RDBUserManagerClient"){
            fileset(dir: "../client/RDBUserManagerClient/build/docs/javadoc") {}
        }
        //mkdir(dir:"dipforge/var/projects/documentation/views/RDFMaterStoreClient")
        //copy(todir: "dipforge/var/projects/documentation/views/RDFMaterStoreClient"){
        //    fileset(dir: "../client/RDFMaterStoreClient/build/docs/javadoc") {}
        //}
        //mkdir(dir:"dipforge/var/projects/documentation/views/RDFStoreClient")
        //copy(todir: "dipforge/var/projects/documentation/views/RDFStoreClient"){
        //    fileset(dir: "../client/RDFStoreClient/build/docs/javadoc") {}
        //}
        mkdir(dir:"dipforge/var/projects/documentation/views/RSSReaderClient")
        copy(todir: "dipforge/var/projects/documentation/views/RSSReaderClient"){
            fileset(dir: "../client/RSSReaderClient/build/docs/javadoc") {}
        }
        mkdir(dir:"dipforge/var/projects/documentation/views/ServiceBrokerClient")
        copy(todir: "dipforge/var/projects/documentation/views/ServiceBrokerClient"){
            fileset(dir: "../client/ServiceBrokerClient/build/docs/javadoc") {}
        }
        mkdir(dir:"dipforge/var/projects/documentation/views/TimerClient")
        copy(todir: "dipforge/var/projects/documentation/views/TimerClient"){
            fileset(dir: "../client/TimerClient/build/docs/javadoc") {}
        }
        mkdir(dir:"dipforge/var/projects/documentation/views/TomcatClient")
        copy(todir: "dipforge/var/projects/documentation/views/TomcatClient"){
            fileset(dir: "../client/TomcatClient/build/docs/javadoc") {}
        }
    }
    // generate the types
    ant {
        java(classname: 'com.rift.coad.rdf.semantic.jdo.generator.GeneratorRunner', fork: false,
            classpath: "${configurations.releaseRDFTypeGenerator.asPath};${configurations.releaseRDFTypeTargets.asPath}",
            args: "generator ${projectDir}/dipforge/var/semantics/types/LogEntry.xml com.rift.coad.audit.dao.LogEntryDAO")
        java(classname: 'com.rift.coad.rdf.semantic.jdo.generator.GeneratorRunner', fork: false,
            classpath: "${configurations.releaseRDFTypeGenerator.asPath};${configurations.releaseRDFTypeTargets.asPath}",
            args: "generator ${projectDir}/dipforge/var/semantics/types/CommonTypes.xml com.rift.coad.rdf.types.network.Host com.rift.coad.rdf.types.network.Service com.rift.coad.rdf.types.operation.User com.rift.coad.rdf.types.mapping.MethodMapping com.rift.coad.rdf.types.mapping.ParameterMapping")
    }
    //announce("Release complete", "notify-send")
}

task copyToTools(type: Copy) {
    into "dipforge/tools/"
    from configurations.releaseTools
    include "**/*CommandLine*" + version + ".jar"
}

task copyBinTemplate(type: Copy) {
    from "${projectDir}/template/bin/"
    into "${projectDir}/dipforge/bin/"
    include 'run.bat'
    include 'run.sh'
    fileMode=0755
    filter(ReplaceTokens, tokens:[dipforge_home: dipforgeHome, dipforge_version: version, hostname: InetAddress.getLocalHost().getHostName(), java_home: javaHome] )
}

task copyEtcTemplate(type: Copy) {
    from "${projectDir}/template/etc/"
    into "${projectDir}/dipforge/etc/"
    include 'config.xml'
    include 'log4j.properties'
    include 'server.policy'
    filter(ReplaceTokens, tokens:[dipforge_home: dipforgeHome, dipforge_version: version,java_home: javaHome, hostname: InetAddress.getLocalHost().getHostName()] )
}

task copySemanticTemplate(type: Copy) {
    from "${projectDir}/template/var/semantics/"
    into "${projectDir}/dipforge/var/semantics/"
    include "*.ttl"
    filter(ReplaceTokens, tokens:[hostname: InetAddress.getLocalHost().getHostName()] )
}

task copyWebManagerToTomcat(type: Copy) {
    into "${projectDir}/dipforge/var/tomcat/webapps/manager"
    from "${projectDir}/template/web/manager"
}

task copyToGroovyLib(type: Copy) {
    into "dipforge/var/groovylib/"
    from configurations.releaseGroovyLib
    exclude "**/*servlet-api*"
}


clean {
    ant {
        delete {
            fileset(dir: "dipforge"){
                include(name: "**/*.war")
                include(name: "**/*.jar")
                include(name: "**/*.ear")
            }
        }
        delete (includeEmptyDirs:true){
            fileset(dir: "dipforge/var/tomcat/webapps"){
                exclude(name: "**/*.keepme")
            }
        }
        delete {
            fileset(dir: "dipforge/var/tomcat/conf/Coadunation"){
                include(name: "**/*.xml")
            }
        }
        delete (includeEmptyDirs:true){
            fileset(dir: "dipforge/var/tomcat/conf/ear"){
                exclude(name: "**/*.keepme")
            }
        }
        delete {
            fileset(dir: "dipforge/var/tomcat/conf"){
                include(name: "**/*.properties")
            }
        }
        delete (includeEmptyDirs:true){
            fileset(dir: "dipforge/var/tomcat/work"){
                exclude(name: "**/*.keepme")
            }
        }
        delete {
            fileset(dir: "dipforge/bin"){
                include(name: "**/*.bat")
                include(name: "**/*.sh")
            }
        }
        delete {
            fileset(dir: "dipforge/etc"){
                include(name: "**/config.xml")
                include(name: "**/*.policy")
                include(name: "**/*.properties")
            }
        }
        delete {
            fileset(dir: "dipforge/log"){
                include(name: "**/*.*")
            }
        }
        delete (includeEmptyDirs:true){
            fileset(dir: "dipforge/var/hsqldb"){
                exclude(name: "**/*.keepme")
            }
        }
        delete {
            fileset(dir: "dipforge/var/semantics"){
                include(name: "**/*.ttl")
            }
        }
        delete {
            fileset(dir: "dipforge/var/groovylib"){
                include(name: "**/*.jar")
            }
        }
        delete (includeEmptyDirs:true){
            fileset(dir: "dipforge/var/projects/documentation/views"){
                exclude(name: "**/images")
                exclude(name: "**/index.gsp")
                exclude(name: "**/project.properties")
                exclude(name: "**/dipForgeLogo_small.png")
            }
        }
        delete {
            fileset(dir: "dipforge/var/semantics/types"){
                include(name: "**/CommonTypes.xml")
                include(name: "**/LogEntry.xml")
            }
        }
    }
}


dependencies {
    // compile
    
    // release boot strap file
    releaseSbin project(':libs:CoadunationBase') {transitive = true}
    
    // release libraries
    releaseLibs project(':libs:CoadunationClient') {transitive = true}
    releaseClients project(':libs:CoadunationClient') {transitive = true}
    releaseLibs project(':libs:CoadunationSecurity') {transitive = true}
    releaseLibs project(':libs:CoadunationHibernate') {transitive = true}
    releaseLibs project(':libs:CoadunationUtil') {transitive = true}
    releaseLibs project(':auth:CoadunationRDBAuth') {transitive = true}
    releaseLibs project(':libs:CoadunationLib') {transitive = true}
    releaseLibs group: 'backport-util-concurrent', name: 'backport-util-concurrent', version: '3.1', ext: 'jar'
    releaseLibs group: 'org.hibernate', name: 'hibernate-c3p0', version: '3.5.1-Final', ext: 'jar'
    releaseLibs group: 'commons-cli', name: 'commons-cli', version: '1.0', ext: 'jar'
    releaseLibs group: 'commons-collections', name: 'commons-collections', version: '3.2.1', ext: 'jar'
    releaseLibs group: 'commons-dbcp', name: 'commons-dbcp', version: '1.2.2', ext: 'jar'
    releaseLibs group: 'commons-discovery', name: 'commons-discovery', version: '0.2', ext: 'jar'
    releaseLibs group: 'commons-logging', name: 'commons-logging', version: '1.0.4', ext: 'jar'
    releaseLibs group: 'commons-pool', name: 'commons-pool', version: '1.3', ext: 'jar'
    releaseLibs group: 'jotm', name: 'jotm', version: '2.0.10', ext: 'jar'
    releaseLibs group: 'jotm', name: 'objectweb-datasource', version: '1.0', ext: 'jar'
    releaseLibs group: 'javax.resource', name: 'connector-api', version: '1.5', ext: 'jar'
    releaseLibs group: 'com.sun.jndi', name: 'cosnaming', version: '1.2.1-Local', ext: 'jar'
    releaseLibs group: 'dom4j', name: 'dom4j', version: '1.6.1', ext: 'jar'
    releaseLibs group: 'net.sf.ehcache', name: 'ehcache', version: '1.2.3', ext: 'jar'
    releaseLibs group: 'org.hibernate', name: 'hibernate-cglib-repack', version: '2.1_3', ext: 'jar'
    releaseLibs group: 'howl', name: 'howl-logger', version: '0.1.11', ext: 'jar'
    releaseLibs group: 'org.hsqldb', name: 'hsqldb', version: '2.2.4', ext: 'jar'
    releaseLibs group: 'org.apache.httpcomponents', name: 'httpcore-nio', version: '4.1-beta2', ext: 'jar'
    releaseLibs group: 'org.objectweb.carol', name: 'carol', version: '2.2.10', ext: 'jar'
    releaseLibs group: 'org.objectweb.carol', name: 'carol-iiop-delegate', version: '2.2.10', ext: 'jar'
    releaseLibs group: 'javax.jts', name: 'jts', version: '1.0', ext: 'jar'
    releaseLibs group: 'avalon', name: 'avalon-logkit', version: '1.2', ext: 'jar'
    releaseLibs group: 'mysql', name: 'mysql-connector-java', version: '5.0.8', ext: 'jar'
    releaseLibs group: 'com.sun.jndi', name: 'providerutil', version: '1.2-Local', ext: 'jar'
    releaseLibs group: 'org.slf4j', name: 'slf4j-api', version: '1.5.8', ext: 'jar'
    releaseLibs group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.5.8', ext: 'jar'
    releaseLibs group: 'com.experlog', name: 'xapool', version: '1.4', ext: 'jar'
    releaseLibs group: 'xstream', name: 'xstream', version: '1.1.3', ext: 'jar'
    releaseLibs group: 'axis', name: 'axis-saaj', version: '1.4', ext: 'jar'
    releaseLibs group: 'axis', name: 'axis-jaxrpc', version: '1.4', ext: 'jar'
    releaseLibs group: 'javassist', name: 'javassist', version: '3.4.GA', ext: 'jar'
    releaseLibs group: 'org.ow2.carol.irmi', name: 'irmi', version: '1.1.2', ext: 'jar'
    releaseLibs group: 'antlr', name: 'antlr', version: '2.7.7', ext: 'jar'

    // release clients
    releaseClients project(':client:DeploymentDaemonClient')
    releaseClients project(':client:DesktopServerClient')
    releaseClients project(':client:DNSServerClient')
    releaseClients project(':client:MessageServiceClient')
    releaseClients project(':client:EmailServerClient')
    releaseClients project(':client:EventServerClient')
    releaseClients project(':client:HsqlDBEngineClient')
    releaseClients project(':client:RDBUserManagerClient')
    releaseClients project(':client:RSSReaderClient')
    releaseClients project(':client:ServiceBrokerClient')
    releaseClients project(':client:TimerClient')
    releaseClients project(':client:TomcatClient')
    releaseClients project(':client:CoadunationTypeManager')
    releaseClients project(':client:DataMapperBroker')
    releaseClients project(':client:ProjectClient')
    
    // release rdf libs
    releaseRDFClients project(':rdf:SchemaUtils')
    releaseRDFClients project(':rdf:Semantics')
    releaseRDFClients project(':rdf:CoadunationSemantics')
    releaseRDFClients project(':rdf:CommonTypes')
    
    // copy to tools
    releaseTools project(':cli:DeploymentDaemonCommandLineTool') {transitive = true}
    releaseTools project(':cli:MessageServiceCommandLineTool') {transitive = true}
    releaseTools project(':cli:ServiceBrokerCommandLineTool') {transitive = true}
    releaseTools project(':cli:TimerCommandLineTool') {transitive = true}

    // release daemons
    releaseDaemon project(':daemon:0005-DNSServer') {transitive = false}
    releaseDaemon project(':daemon:0010-HsqlDBEngineDaemon') {transitive = false}
    releaseDaemon project(':daemon:0020-RDBUserManager') {transitive = false}
    releaseDaemon project(':daemon:0040-ServiceBroker') {transitive = false}
    releaseDaemon project(':daemon:0040-MessageService') {transitive = false}
    releaseDaemon project(':daemon:0045-EmailServer') {transitive = false}
    releaseDaemon project(':daemon:0050-DesktopServer') {transitive = false}
    releaseDaemon project(':daemon:0050-EventServer') {transitive = false}
    releaseDaemon project(':daemon:0050-Timer') {transitive = false}
    releaseDaemon project(':daemon:0060-Tomcat') {transitive = false}
    releaseDaemon project(':daemon:0101-DeploymentDaemon') {transitive = false}
    releaseDaemon project(':daemon:0102-RSSReader') {transitive = false}
    releaseDaemon project(':daemon:0100-AuditTrailServer')
    releaseDaemon project(':daemon:0140-GroovyDaemon')
    releaseDaemon project(':daemon:0150-CoadunationTypeManager')
    releaseDaemon project(':daemon:0160-DataMapperBroker')
    releaseDaemon project(':daemon:0200-ProjectManager')
    
    // release web
//    releaseWeb project(':web:CoadunationAdmin')
//    releaseWeb project(':web:CoadunationDesktop')
    releaseWeb project(':web:FileManager')
//    releaseWeb project(':web:AuditTrailConsole')
//    releaseWeb project(':web:CoadunationTypeManagerConsole')
    releaseWeb project(':web:DipforgeEntryPoint')

    releaseEAR project(':composite:dipforgeenvironment')

    // release extract web
    releaseExtractWeb project(':web:SchemaStore')

    // groovy lib
    releaseGroovyLib project(':libs:GroovyServletBootStrap')
    releaseGroovyLib project(':client:ProjectClient')
    releaseGroovyLib project(':client:CoadunationTypeManager')
    releaseGroovyLib project(':client:GroovyDaemonClient')
    releaseGroovyLib "asm:asm:3.2"
    releaseGroovyLib "antlr:antlr:2.7.7"
    releaseGroovyLib "asm:asm-commons:3.2"
    releaseGroovyLib "asm:asm-util:3.2"
    releaseGroovyLib "asm:asm-analysis:3.2"
    releaseGroovyLib "asm:asm-tree:3.2"
    
    // rdf type generator
    releaseRDFTypeGenerator "javax.transaction:jta:1.1"
    releaseRDFTypeGenerator "javax.transaction:jta:1.1"
    releaseRDFTypeGenerator "log4j:log4j:1.2.14"
    releaseRDFTypeGenerator "com.hp.hpl.jena:jena:2.6.4"
    releaseRDFTypeGenerator "com.hp.hpl.jena:arq:2.8.7"
    releaseRDFTypeGenerator "com.hp.hpl.jena:arq-extra:2.6.0"
    releaseRDFTypeGenerator "com.hp.hpl.jena:sdb:1.3.4"
    releaseRDFTypeGenerator "com.hp.hpl.jena:iri:0.8"
    releaseRDFTypeGenerator "com.ibm.icu:icu4j:3.4.4"
    releaseRDFTypeGenerator "commons-logging:commons-logging:1.0.4"
    releaseRDFTypeGenerator "org.slf4j:slf4j-log4j12:1.5.8"
    releaseRDFTypeGenerator "cglib:cglib:2.1_3"
    releaseRDFTypeGenerator "xerces:xercesImpl:2.7.1"
    releaseRDFTypeGenerator project(':rdf:Semantics')

    // rdf targets
    releaseRDFTypeTargets project(':daemon:0100-AuditTrailServer')
    releaseRDFTypeTargets project(':rdf:CommonTypes')
}


task build(dependsOn:[copyToSbin,copyToLib,copyToClient,copyToDaemon,copyWarToDaemon,copyEarToDaemon,copyToTools,copyToRDFClient,copyBinTemplate,copyEtcTemplate,copyWebManagerToTomcat,copySemanticTemplate,copyToGroovyLib]) {
}

release.dependsOn build

def getJavaHomeVar() {
    def javaHome = System.properties["java.home"]
    if (javaHome.endsWith("/jre")) {
        javaHome = javaHome.substring(0,javaHome.length() - "/jre".length())
    }
    return javaHome
}
